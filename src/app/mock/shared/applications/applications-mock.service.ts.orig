import { Injectable } from "@angular/core";
import {
  HttpRequest,
  HttpResponse,
  HttpHandler,
  HttpEvent,
  HttpInterceptor
} from "@angular/common/http";
import { Observable, of, throwError } from "rxjs";
import { delay, mergeMap, materialize, dematerialize } from "rxjs/operators";
import { environment } from "src/environments/environment";
import { applicationsMock } from "./applications-mock";
import { categoriesMock } from "./categories-mock";
import { industriesMock } from "./industries-mock";
import { applicationDetailsMock } from "./application-details-mock";
import { subscriptionMock } from "./subscriptions-mock";
import { Application } from "src/app/feature/shared/models/application";
import { Category } from "src/app/feature/shared/models/category";
import { Industry } from "../../../feature/shared/models/industry";
import { Subscription } from "../../../feature/shared/models/subscription";
import { Plan } from "src/app/feature/shared/models/plans";
import { plansMock } from "../plans/plans-mock";

@Injectable()
export class ApplicationsMockService implements HttpInterceptor {
  private readonly;
  API_URL = `${environment.applicationId}/`;

  private application: Application[] = applicationsMock;
  private categories: Category[] = categoriesMock;
  private industries: Industry[] = industriesMock;
  private applicationDetails: any[] = applicationDetailsMock;
  private subscriptions: Subscription[] = subscriptionMock;
<<<<<<< HEAD
  private plans: Plan[] = plansMock;
=======
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f

  constructor() {
    console.log("ApplicationsMock Service Enabled");
  }

  intercept(
    request: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    return of(null)
      .pipe(
        mergeMap(() => {
          if (request.url.endsWith(this.API_URL) && request.method === "GET") {
            // console.log("--- Serving Application List ---");
            return this.serveApplicationsRequest(request);
          }

          if (
            request.url.match(`^${this.API_URL}[0-9]+`) &&
            request.method === "GET"
          ) {
            // console.log("----Serving Application---");
            // if (request.headers.get('Authorization') === 'Bearer fake-jwt-token') {
            return this.serveApplicationRequest(request);
          }
          if (
            request.url.match(`^${this.API_URL}application-details`) &&
            request.method === "GET"
          ) {
            // console.log("--- Serving Categories List ---", request);
            return this.serveApplicationDetails(request);
          }
          if (
            request.url.match(`^${this.API_URL}industries`) &&
            request.method === "GET"
          ) {
            return this.serveIndustryRequest(request);
          }
          if (
            request.url.match(`^${this.API_URL}plans`) &&
            request.method === "GET"
          ) {
            return this.getPlansRequest(request);
          }
          if (
            request.url.match(`^${this.API_URL}categories`) &&
            request.method === "GET"
          ) {
            // console.log("--- Serving Categories List ---", request);
            return this.serveCategoriesResult(request);
          }
          if (
            request.url.match(`^${this.API_URL}subscription`) &&
            request.method === "GET"
          ) {
            // console.log("--- Serving Categories List ---", request);
            return this.serveSubscriptionResult(request);
          }
          return next.handle(request);
        })
      )
      .pipe(materialize())
      .pipe(delay(1000))
      .pipe(dematerialize());
  }

  private getParam(params, parameterName, defaultValue) {
    let retunValue = params ? params.get(parameterName) : defaultValue;
    if (retunValue == null || retunValue === undefined) {
      retunValue = defaultValue;
    }
    return retunValue;
  }

  private serveApplicationsRequest(request: HttpRequest<Application>) {
    const industryID: number = this.getParam(request.params, "IndustryID", 0);
    const pageNumber: number = this.getParam(request.params, "PageNumber", 0);
    const pageSize: number = this.getParam(request.params, "PageSize", 0);
<<<<<<< HEAD
    const appCategoryIDs: string = this.getParam(
      request.params,
      "AppCategoryIDs",
      ""
    );
    const appID: number = this.getParam(request.params, "AppID", 0);
    const appCode: string = this.getParam(request.params, "AppCode", "");
    const appName: string = this.getParam(request.params, "AppName", "");
    //let requestParameter = request.params
    //  ? request.params.get("requestParameter")
    //  : {};
    let applicationResult: any = { ...this.application };
    console.log(
      "--- Serving Application List3 ---",
      applicationResult,
      this.application
    );

    if (industryID !== 0) {
      applicationResult.Applications = applicationResult.Applications.filter(
        (apps: any) => apps.IndustryID === industryID
=======
    const appCategoryIDs: string = this.getParam(request.params, "AppCategoryIDs", "");
    const appID: number = this.getParam(request.params, "AppID", 0);
    const appCode: string = this.getParam(request.params, "AppCode", "");
    const appName: string = this.getParam(request.params, "AppName", "");
    // let requestParameter = request.params
    //  ? request.params.get("requestParameter")
    //  : {};
    const applicationResult: any = { ...this.application };
    console.log("--- Serving Application List3 ---", applicationResult, this.application);

    if (industryID !== 0) {
      applicationResult.Applications = applicationResult.Applications.filter(
        (apps: any) =>
          apps.IndustryID === industryID
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      );
    }

    if (appCategoryIDs !== "") {
<<<<<<< HEAD
      let splitTiltArray = appCategoryIDs.split("~");
      applicationResult.Applications = applicationResult.Applications.filter(
        (apps: any) =>
          splitTiltArray.find(
            filterVal => apps.AppCategoryID === parseInt(filterVal)
          )
=======
      const splitTiltArray = appCategoryIDs.split(
        "~"
      );
      applicationResult.Applications = applicationResult.Applications.filter((apps: any) =>
        splitTiltArray.find(
          filterVal => apps.AppCategoryID === parseInt(filterVal, 10)
        )
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      );
    }

    if (appID !== 0) {
      applicationResult.Applications = applicationResult.Applications.filter(
<<<<<<< HEAD
        (apps: any) => apps.AppID === appID
=======
        (apps: any) =>
          apps.AppID === appID
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      );
    }

    if (appCode !== "") {
      applicationResult.Applications = applicationResult.Applications.filter(
        (apps: any) =>
<<<<<<< HEAD
          apps.AppCode.toLowerCase().indexOf(appCode.toLowerCase()) > -1
=======
          apps.AppCode.toLowerCase().indexOf(
            appCode.toLowerCase()
          ) > -1
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      );
    }

    if (appName !== "") {
      applicationResult.Applications = applicationResult.Applications.filter(
        (apps: any) =>
<<<<<<< HEAD
          apps.AppName.toLowerCase().indexOf(appName.toLowerCase()) > -1
      );
    }

    if (pageNumber !== 0 && pageSize !== 0) {
      let first = 0;
      let last = pageSize - 1;
      // console.log("page==> ",pageNumber, pageSize, (first+((pageNumber-1)*pageSize)), (last+((pageNumber-1)*pageSize)));
      if (pageNumber > 1) {
        applicationResult.Applications = applicationResult.Applications.slice(
          first + (pageNumber - 1) * pageSize,
          last + (pageNumber - 1) * pageSize + 1
        );
=======
          apps.AppName.toLowerCase().indexOf(
            appName.toLowerCase()
          ) > -1
      );
    }

    if ((pageNumber !== 0) && (pageSize !== 0)) {
      const first = 0;
      const last = pageSize - 1;
      // console.log("page==> ",pageNumber, pageSize, (first+((pageNumber-1)*pageSize)), (last+((pageNumber-1)*pageSize)));
      if (pageNumber > 1) {
        applicationResult.Applications = applicationResult
          .Applications.slice((first + ((pageNumber - 1) * pageSize)), (last + ((pageNumber - 1) * pageSize)) + 1);
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      } else {
        applicationResult.Applications = applicationResult.Applications.slice(
          first,
          last + 1
        );
      }
    }

    console.log("--- HttpResponse ---", request, applicationResult);

    // console.log("--- application ---", applicationResult);
    // if (request.headers.get('Authorization') === 'Bearer fake-jwt-token') {
<<<<<<< HEAD
    return of(new HttpResponse({ status: 200, body: applicationResult }));
=======
    return of(
      new HttpResponse({ status: 200, body: applicationResult })
    );
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
    // } else {
    //   return throwError({ error: { message: 'Unauthorised' } });
    // }
  }

  private serveApplicationRequest(request: HttpRequest<Application>) {
    const urlParts = request.url.split("/");
    const id = parseInt(urlParts[urlParts.length - 1], 10);
    const matchedApplication = this.application.filter(
      application => application.AppID === id
    );
    if (matchedApplication.length) {
<<<<<<< HEAD
      return of(new HttpResponse({ status: 200, body: matchedApplication[0] }));
=======
      return of(
        new HttpResponse({ status: 200, body: matchedApplication[0] })
      );
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
    } else {
      return of(
        new HttpResponse({
          status: 404,
          statusText: "Application Not Found"
        })
      );
    }
  }

  private serveApplicationDetails(request: HttpRequest<Application>) {
    const appCode: string = this.getParam(request.params, "AppCode", "");

<<<<<<< HEAD
    let applnDetailsResult: any = { ...this.applicationDetails };
=======
    const applnDetailsResult: any = { ...this.applicationDetails };
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f

    if (appCode !== "") {
      applnDetailsResult.Industry = applnDetailsResult.Industry.filter(
        (apps: any) => apps.AppCode === appCode
      );
    }

<<<<<<< HEAD
    return of(new HttpResponse({ status: 200, body: applnDetailsResult }));
  }

  private getPlansRequest(request: HttpRequest<Plan>) {
    const planID: number = this.getParam(request.params, "PlanID", 0);
    const planCode: string = this.getParam(request.params, "PlanCode", "");
    const pageNumber: number = this.getParam(request.params, "PageNumber", 0);
    const pageSize: number = this.getParam(request.params, "PageSize", 0);

    let plansResult: any = { ...this.plans };

    if (planID !== 0) {
      plansResult.Plan = plansResult.Plan.filter(
        (apps: any) => apps.PlanID === planID
      );
    }
    if (planCode !== "") {
      plansResult.Plan = plansResult.Plan.filter(
        (apps: any) =>
          apps.PlanCode.toLowerCase().indexOf(planCode.toLowerCase()) > -1
      );
    }

    if (pageNumber !== 0 && pageSize !== 0) {
      let first = 0;
      let last = pageSize - 1;
      console.log(
        "page==> ",
        pageNumber,
        pageSize,
        first + (pageNumber - 1) * pageSize,
        last + (pageNumber - 1) * pageSize
      );
      if (pageNumber > 1) {
        plansResult.Plan = plansResult.Plan.slice(
          first + (pageNumber - 1) * pageSize,
          last + (pageNumber - 1) * pageSize + 1
        );
      } else {
        plansResult.Plan = plansResult.Plan.slice(first, last + 1);
      }
    }

    return of(new HttpResponse({ status: 200, body: plansResult }));
  }

  private serveIndustryRequest(request: HttpRequest<Industry>) {
    const industryID: number = this.getParam(request.params, "IndustryID", 0);
    const industryCode: string = this.getParam(
      request.params,
      "IndustryCode",
      ""
    );
    const pageNumber: number = this.getParam(request.params, "PageNumber", 0);
    const pageSize: number = this.getParam(request.params, "PageSize", 0);

    let industriesResult: any = { ...this.industries };

    if (industryID !== 0) {
      industriesResult.Industries = industriesResult.Industries.filter(
        (apps: any) => apps.IndustryID === industryID
=======
    return of(
      new HttpResponse({ status: 200, body: applnDetailsResult })
    );
  }

  private serveIndustryRequest(request: HttpRequest<Industry>) {
    const industryID: number = this.getParam(request.params, "IndustryID", 0);
    const industryCode: string = this.getParam(request.params, "industryCode", "");
    const pageNumber: number = this.getParam(request.params, "PageNumber", 0);
    const pageSize: number = this.getParam(request.params, "PageSize", 0);

    const industriesResult: any = { ...this.industries };

    if (industryID !== 0) {
      industriesResult.Industries = industriesResult.Industries.filter(
        (apps: any) =>
          apps.IndustryID === industryID
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      );
    }
    if (industryCode !== "") {
      industriesResult.Industries = industriesResult.Industries.filter(
        (apps: any) =>
<<<<<<< HEAD
          apps.IndustryCode.toLowerCase().indexOf(industryCode.toLowerCase()) >
          -1
      );
    }

    if (pageNumber !== 0 && pageSize !== 0) {
      let first = 0;
      let last = pageSize - 1;
      // console.log("page==> ",pageNumber, pageSize, (first+((pageNumber-1)*pageSize)), (last+((pageNumber-1)*pageSize)));
      if (pageNumber > 1) {
        industriesResult.Industries = industriesResult.Industries.slice(
          first + (pageNumber - 1) * pageSize,
          last + (pageNumber - 1) * pageSize + 1
        );
=======
          apps.IndustryCode.toLowerCase().indexOf(
            industryCode.toLowerCase()
          ) > -1
      );
    }

    if ((pageNumber !== 0) && (pageSize !== 0)) {
      const first = 0;
      const last = pageSize - 1;
      // console.log("page==> ",pageNumber, pageSize, (first+((pageNumber-1)*pageSize)), (last+((pageNumber-1)*pageSize)));
      if (pageNumber > 1) {
        industriesResult.Industries = industriesResult
          .Industries.slice((first + ((pageNumber - 1) * pageSize)), (last + ((pageNumber - 1) * pageSize)) + 1);
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      } else {
        industriesResult.Industries = industriesResult.Industries.slice(
          first,
          last + 1
        );
      }
    }

<<<<<<< HEAD
    return of(new HttpResponse({ status: 200, body: industriesResult }));
=======
    return of(
      new HttpResponse({ status: 200, body: industriesResult })
    );
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
  }

  private serveCategoriesResult(request: HttpRequest<Category>) {
    const industryID: number = this.getParam(request.params, "IndustryID", 0);
<<<<<<< HEAD
    const appCategoryID: number = this.getParam(
      request.params,
      "AppCategoryID",
      0
    );
    const pageNumber: number = this.getParam(request.params, "PageNumber", 0);
    const pageSize: number = this.getParam(request.params, "PageSize", 0);
    const appCategoryCode: string = this.getParam(
      request.params,
      "AppCategoryCode",
      ""
    );

    let categoriesResult: any = { ...this.categories };

    if (industryID !== 0) {
      categoriesResult.Categories = categoriesResult.Categories.filter(
        (apps: any) => apps.IndustryID === industryID
=======
    const appCategoryID: number = this.getParam(request.params, "categoryId", 0);
    const pageNumber: number = this.getParam(request.params, "PageNumber", 0);
    const pageSize: number = this.getParam(request.params, "PageSize", 0);
    const appCategoryCode: string = this.getParam(request.params, "categoryCode", "");

    const categoriesResult: any = { ...this.categories };

    if (industryID !== 0) {
      categoriesResult.Categories = categoriesResult.Categories.filter(
        (apps: any) =>
          apps.IndustryID === industryID
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      );
    }

    if (appCategoryID !== 0) {
      categoriesResult.Categories = categoriesResult.Categories.filter(
<<<<<<< HEAD
        (apps: any) => apps.AppCategoryID === appCategoryID
=======
        (apps: any) =>
          apps.CategoryID === appCategoryID
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      );
    }

    if (appCategoryCode !== "") {
      categoriesResult.Categories = categoriesResult.Categories.filter(
        (apps: any) =>
<<<<<<< HEAD
          apps.AppCategoryCode.toLowerCase().indexOf(
=======
          apps.CategoryCode.toLowerCase().indexOf(
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
            appCategoryCode.toLowerCase()
          ) > -1
      );
    }

<<<<<<< HEAD
    if (pageNumber !== 0 && pageSize !== 0) {
      let first = 0;
      let last = pageSize - 1;
      // console.log("page==> ",pageNumber, pageSize, (first+((pageNumber-1)*pageSize)), (last+((pageNumber-1)*pageSize)));
      if (pageNumber > 1) {
        categoriesResult.Categories = categoriesResult.Categories.slice(
          first + (pageNumber - 1) * pageSize,
          last + (pageNumber - 1) * pageSize + 1
        );
=======
    if ((pageNumber !== 0) && (pageSize !== 0)) {
      const first = 0;
      const last = pageSize - 1;
      // console.log("page==> ",pageNumber, pageSize, (first+((pageNumber-1)*pageSize)), (last+((pageNumber-1)*pageSize)));
      if (pageNumber > 1) {
        categoriesResult.Categories = categoriesResult
          .Categories.slice((first + ((pageNumber - 1) * pageSize)), (last + ((pageNumber - 1) * pageSize)) + 1);
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      } else {
        categoriesResult.Categories = categoriesResult.Categories.slice(
          first,
          last + 1
        );
      }
    }

<<<<<<< HEAD
    return of(new HttpResponse({ status: 200, body: categoriesResult }));
=======
    return of(
      new HttpResponse({ status: 200, body: categoriesResult })
    );
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
  }

  private serveSubscriptionResult(request: HttpRequest<Subscription>) {
    const pageNumber: number = this.getParam(request.params, "PageNumber", 0);
    const pageSize: number = this.getParam(request.params, "PageSize", 0);
<<<<<<< HEAD
    const companyName: string = this.getParam(
      request.params,
      "CompanyName",
      ""
    );

    let subscriptionResult: any = { ...this.subscriptions };

    subscriptionResult.Subscriptions = subscriptionResult.Subscriptions.filter(
      (apps: any) => !apps.Status
    );
=======
    const companyName: string = this.getParam(request.params, "CompanyName", "");

    const subscriptionResult: any = { ...this.subscriptions };

    subscriptionResult.Subscriptions = subscriptionResult.Subscriptions.filter((apps: any) => !apps.Status);
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f

    if (companyName !== "") {
      subscriptionResult.Subscriptions = subscriptionResult[
        "result-set-1"
      ].filter(
        (apps: any) =>
<<<<<<< HEAD
          apps.CompanyName.toLowerCase().indexOf(companyName.toLowerCase()) > -1
      );
    }

    if (pageNumber !== 0 && pageSize !== 0) {
      let first = 0;
      let last = pageSize - 1;
      // console.log("page==> ",pageNumber, pageSize, (first+((pageNumber-1)*pageSize)), (last+((pageNumber-1)*pageSize)));
      if (pageNumber > 1) {
        subscriptionResult.Subscriptions = subscriptionResult.Subscriptions.slice(
          first + (pageNumber - 1) * pageSize,
          last + (pageNumber - 1) * pageSize + 1
        );
=======
          apps.CompanyName.toLowerCase().indexOf(
            companyName.toLowerCase()
          ) > -1
      );
    }

    if ((pageNumber !== 0) && (pageSize !== 0)) {
      const first = 0;
      const last = pageSize - 1;
      // console.log("page==> ",pageNumber, pageSize, (first+((pageNumber-1)*pageSize)), (last+((pageNumber-1)*pageSize)));
      if (pageNumber > 1) {
        subscriptionResult.Subscriptions = subscriptionResult
          .Subscriptions.slice((first + ((pageNumber - 1) * pageSize)), (last + ((pageNumber - 1) * pageSize)) + 1);
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
      } else {
        subscriptionResult.Subscriptions = subscriptionResult.Subscriptions.slice(
          first,
          last + 1
        );
      }
    }

<<<<<<< HEAD
    return of(new HttpResponse({ status: 200, body: subscriptionResult }));
=======
    return of(
      new HttpResponse({ status: 200, body: subscriptionResult })
    );
>>>>>>> 2e622c77e4b3c66bfc19f0f4ef1052b0c7385a9f
  }
}
