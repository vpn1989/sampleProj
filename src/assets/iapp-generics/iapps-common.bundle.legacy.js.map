{"version":3,"sources":["webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/directives/unsafe-html.js"],"names":["isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","element","name","strings","this","dirty","parts","i","length","_createPart","AttributePart","l","text","part","undefined","v","String","t","setAttribute","_getValue","committer","noChange","isDirective","directive","commit","NodePart","options","__pendingValue","container","startNode","appendChild","createMarker","endNode","ref","nextSibling","__insert","__commitText","TemplateResult","__commitTemplateResult","Node","__commitNode","__commitIterable","nothing","clear","node","parentNode","insertBefore","valueAsString","previousSibling","nodeType","data","document","createTextNode","template","templateFactory","TemplateInstance","update","values","instance","processor","fragment","_clone","itemPart","itemParts","partIndex","item","push","appendIntoPart","insertAfterPart","setValue","removeNodes","BooleanAttributePart","Error","removeAttribute","PropertyCommitter","single","PropertyPart","eventOptionsSupported","window","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","call","o","marker","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","nodesToRemove","stack","walker","createTreeWalker","content","lastPartIndex","index","nextNode","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","statics","split","type","tagName","currentNode","indexOf","parent","lastIndex","insert","s","match","pop","n","removeChild","str","suffix","isTemplatePartActive","createComment","isCEPolyfill","customElements","polyfillWrapFlushCallback","reparentNodes","start","end","before","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","WeakMap","keyString","Map","set","key","join","getTemplateElement","render","firstChild","Object","assign","appendInto","html","commentMarker","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","SVGTemplateResult","svgElement","directives","f","d","has","__parts","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","previousValues","unsafeHTML","previousValue"],"mappings":"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","file":"iapps-common.bundle.legacy.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = document.createElement('template');\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map"],"sourceRoot":""}