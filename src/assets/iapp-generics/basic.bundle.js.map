{"version":3,"sources":["webpack:///./src/basic/header-sidebar/header-sidebar.tpl.ts","webpack:///./src/basic/header/header.tpl.ts","webpack:///./src/shared/formats.ts","webpack:///./src/basic/sidebar/sidebar.tpl.ts","webpack:///./src/basic/all.ts","webpack:///.*spec\\.ts).*\\.ts$","webpack:///./src/basic/header-sidebar/header-sidebar.ts","webpack:///./src/basic/header/header.ts","webpack:///./src/basic/sidebar/sidebar.ts"],"names":["template","state","headerContent","sidebarContent","events","mainMenuIconClick","menuIcon","navLogo","onLogoClick","toggleSidebar","hideMenuList","menuListHidden","userName","menuListTemplate","menus","showLanguagleList","hideLanguageList","selectedLanguage","languageListHidden","languageListTemplate","languages","showPlantList","hidePlantList","selectedPlant","plantListHidden","plantListTemplate","plants","mobileDropDownSelection","hideDropElementMobile","plantListTemplateForMobile","languageListTemplateForMobile","toggleDropDownMobile","plantList","plantTemplateListHidden","undefined","map","plant","onPlantItemClicked","JSON","stringify","name","langList","languageTemplateListHidden","language","onLanguageItemClicked","icon","menuList","menu","onMenuItemClicked","label","Intl","NumberFormat","style","currency","maximumFractionDigits","minimumFractionDigits","DateTimeFormat","month","year","kebapToCamelCase","split","reduce","text","token","toLocaleUpperCase","substr","setlistItem","menuItem","menuItemClick","active","listName","source","isMenuToggled","menuItems","sideBarListItems","sideBarMenuItems","r","keys","forEach","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","Object","resolve","module","exports","DEFAULT_STATE","connected","content","HeaderSidebarComponent","HTMLElement","PASS_THROUGH_FIELDS","this","getHtmlHeaderContent","document","querySelector","addEventListener","respHeader","window","fetch","then","text1","DOMParser","parseFromString","respSidebar","updateState","getMenuClickEvent","getPlantClickEvent","getLanguageClickEvent","onClickLogoEvent","onClickMainMenuEvent","eventContext","payload","render","customElements","define","HeaderComponent","updatePlant","updateLanguage","updateMenu","menuListElement","menuListCollection","children","menuListArray","slice","call","Array","menuArrayItem","menuElement","url","innerHTML","push","languageListElement","languageListCollection","languageListArray","languageArrayItem","languageElement","parseInt","plantListElement","plantListCollection","plantListArray","plantArrayItem","plantElement","screen","width","event","toggleMenuClick","CustomEvent","detail","dispatchEvent","selectedPlantElement","target","selectedPlantJSONString","getAttribute","parse","selectedPlantChoice","selectedLanguageElement","selectedLanguageJSONString","selectedLanguageChoice","menuItemClickEvent","onClickLogo","onClickMainmenuIcon","_oldValue","newValue","Boolean","redraw","MOBILE_WIDTH","isMobile","body","SIDEBAR_ELEMENT_TAGS","categoryID","href","SideBarComponent","super","prepareSidebarMenuItems","prepareSidebar","item","reloadPage","String","location","origin","iappApplicationElement","navItemListArray","sidebarMenuItems","navItem","navElement","filteredMenuItems","filterDuplicates","setActiveMenuItem","classList","add","remove","categoryIds","from","Set","navBarMenuItems","find","currentURL","replace"],"mappings":"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","file":"basic.bundle.js","sourcesContent":["import { html } from \"lit-html\";\n\nimport { HeaderState } from \"./header-sidebar\";\nimport { unsafeHTML } from \"lit-html/directives/unsafe-html.js\";\n\nexport const template = (state: HeaderState) => html`\n  <div id=\"header\">${unsafeHTML(state.headerContent)}</div>\n  <div id=\"sidebar\">${unsafeHTML(state.sidebarContent)}</div>\n`;\n","import { html } from \"lit-html\";\n\nimport { HeaderState, HeaderEvents, Plant, Language, Menu } from \"./header\";\n\nexport const template = (state: HeaderState, events: HeaderEvents) => html`\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-light border-bottom pl-0 pr-0\">\n    <div class=\"col-8 col-md-6\">\n      <a class=\"navbar-brand\" href=\"/dashboard\" @click=${events.mainMenuIconClick}><img src=\"${state.menuIcon}\"/></a>\n      <img class=\"cursor-pointer img-logo\" src=\"${state.navLogo}\" @click=${events.onLogoClick} />\n      <i\n        @click=\"${events.toggleSidebar}\"\n        class=\"px-3 py-1 fa fa-bars text-secondary cursor-pointer\"\n        aria-hidden=\"true\"\n      ></i>\n    </div>\n    <div class=\"col-4 col-md-6\">\n      <div class=\"\" id=\"iapp-main-navbar-collapse\">\n        <ul class=\"d-flex flex-row-reverse navbar-nav ml-auto\">\n          <li class=\"nav-item dropdown\">\n            <button\n              @click=\"${events.hideMenuList}\"\n              class=\"btn\"\n              type=\"button\"\n              id=\"dropdownLogoutMenuSelect\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n            >\n              <i class=\"fa fa-ellipsis-v\" aria-hidden=\"true\"></i>\n            </button>\n            <div\n              class=\"dropdown-menu position-absolute dropdown-menu-right ${state.menuListHidden ? \"show\" : \"\"}\"\n              aria-labelledby=\"dropdownLogoutMenuSelect\"\n            >\n              <a class=\"d-block d-sm-none dropdown-item border-bottom\">Hi, <b>${state.userName}</b></a>\n              ${menuListTemplate(state.menus as Menu[], events)}\n            </div>\n          </li>\n          <li class=\"nav-item dropdown mr-3 ${!state.showLanguagleList ? \"d-none\" : \"d-none d-sm-none d-md-block\"}\">\n            <button\n              @click=\"${events.hideLanguageList}\"\n              class=\"btn border dropdown-toggle\"\n              type=\"button\"\n              id=\"dropdownCountrySelect\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n            >\n              <img\n                class=\"mr-1\"\n                height=\"15\"\n                width=\"15\"\n                src=\"https://iappsdemo.fliplabs.net/IndustryAppFe/assets//images/flag_united_kingdom.png\"\n              />\n              <span>${state.selectedLanguage}</span>\n            </button>\n            <div\n              class=\"dropdown-menu dropdown-menu-right ${state.languageListHidden ? \"show\" : \"\"}\"\n              aria-labelledby=\"dropdownCountrySelect\"\n            >\n              ${languageListTemplate(state.languages as Language[], events)}\n            </div>\n          </li>\n          <li class=\"nav-item dropdown mr-3 ${!state.showPlantList ? \"d-none\" : \"d-none d-sm-none d-md-block\"}\">\n            <button\n              @click=\"${events.hidePlantList}\"\n              class=\"btn border dropdown-toggle\"\n              type=\"button\"\n              id=\"dropdownRegionSelect\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n            >\n              <span>${state.selectedPlant}</span>\n            </button>\n            <div\n              class=\"dropdown-menu dropdown-menu-right ${state.plantListHidden ? \"show\" : \"\"}\"\n              aria-labelledby=\"dropdownRegionSelect\"\n            >\n              ${plantListTemplate(state.plants as Plant[], events)}\n            </div>\n          </li>\n          <li class=\"d-block d-md-none nav-item dropdown mr-3\">${mobileDropDownSelection(events, state)}</li>\n          <li class=\"d-none d-sm-block nav-item dropdown mr-3\">\n            <div class=\"navbar-text\">Hi, <b>${state.userName}</b></div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n  <div\n    class=\"col-12 position-absolute p-0 ${!state.hideDropElementMobile\n      ? \"d-none d-sm-none\"\n      : \"d-block d-sm-block d-md-none\"}\"\n  >\n    ${plantListTemplateForMobile(state.plants as Plant[], events, state)}\n    ${languageListTemplateForMobile(state.languages as Language[], events, state)}\n  </div>\n`;\n\nconst mobileDropDownSelection = (events: HeaderEvents, state: HeaderState) => html`\n  <i\n    class=\"fa fa-chevron-circle-down p-2 default-icon-color cursor-pointer mt-1 ${state.hideDropElementMobile\n      ? \"d-none d-sm-none\"\n      : \"\"}\"\n    aria-hidden=\"true\"\n    @click=\"${events.toggleDropDownMobile}\"\n  ></i>\n  <i\n    class=\"fa fa-chevron-circle-up p-2 default-icon-color cursor-pointer mt-1 ${!state.hideDropElementMobile\n      ? \"d-none d-sm-none\"\n      : \"\"}\"\n    aria-hidden=\"true\"\n    @click=\"${events.toggleDropDownMobile}\"\n  ></i>\n`;\n\nconst plantListTemplateForMobile = (plantList: Plant[], events: HeaderEvents, state: HeaderState) => html`\n  <button\n    @click=\"${events.hidePlantList}\"\n    class=\"btn border-bottom w-100 dropdown-toggle text-right rounded-0\"\n    type=\"button\"\n    id=\"dropdownFullPlantSelect\"\n    data-toggle=\"dropdown\"\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    <span class=\"float-left\">${state.selectedPlant}</span>\n  </button>\n  <div\n    class=\"dropdown-menu w-100 dropdown-menu-right ${state.plantTemplateListHidden ? \"show\" : \"\"}\"\n    aria-labelledby=\"dropdownFullPlantSelect\"\n  >\n    ${plantList !== undefined\n      ? plantList.map(\n          plant => html`\n            <a @click=${events.onPlantItemClicked} data-plant=\"${JSON.stringify(plant)}\" class=\"dropdown-item \"\n              ><span data-plant=\"${JSON.stringify(plant)}\">${plant.name}</span></a\n            >\n          `\n        )\n      : \"\"}\n  </div>\n`;\nconst languageListTemplateForMobile = (langList: Language[], events: HeaderEvents, state: HeaderState) => html`\n  <button\n    @click=\"${events.hideLanguageList}\"\n    class=\"btn border-bottom w-100 dropdown-toggle text-right rounded-0 ${state.plantTemplateListHidden\n      ? \"d-none d-sm-none\"\n      : \"\"}\"\n    type=\"button\"\n    id=\"dropdownFullCountrySelect\"\n    data-toggle=\"dropdown\"\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    <div class=\"float-left\">\n      <img\n        class=\"mr-1\"\n        height=\"15\"\n        width=\"15\"\n        src=\"https://iappsdemo.fliplabs.net/IndustryAppFe/assets//images/flag_united_kingdom.png\"\n      />\n      <span>${state.selectedLanguage}</span>\n    </div>\n  </button>\n  <div\n    class=\"dropdown-menu w-100 dropdown-menu-right ${state.languageTemplateListHidden ? \"show\" : \"\"}\"\n    aria-labelledby=\"dropdownFullCountrySelect\"\n  >\n    ${langList !== undefined\n      ? langList.map(\n          language => html`\n            <a @click=${events.onLanguageItemClicked} data-language=\"${JSON.stringify(language)}\" class=\"dropdown-item\"\n              ><img class=\"mr-1\" height=\"15\" width=\"15\" src=\"${language.icon}\" />\n              <span data-language=\"${JSON.stringify(language)}\">${language.name}</span>\n            </a>\n          `\n        )\n      : \"\"}\n  </div>\n`;\n\nconst plantListTemplate = (plantList: Plant[], events: HeaderEvents) =>\n  html`\n    ${plantList !== undefined\n      ? plantList.map(\n          plant =>\n            html`\n              <a @click=${events.onPlantItemClicked} data-plant=\"${JSON.stringify(plant)}\" class=\"dropdown-item\"\n                ><span data-plant=\"${JSON.stringify(plant)}\">${plant.name}</span></a\n              >\n            `\n        )\n      : \"\"}\n  `;\n\nconst languageListTemplate = (langList: Language[], events: HeaderEvents) =>\n  html`\n    ${langList !== undefined\n      ? langList.map(\n          language =>\n            html`\n              <a\n                @click=${events.onLanguageItemClicked}\n                data-language=\"${JSON.stringify(language)}\"\n                class=\"dropdown-item\"\n                ><img class=\"mr-1\" height=\"15\" width=\"15\" src=\"${language.icon}\" />\n                <span data-language=\"${JSON.stringify(language)}\">${language.name}</span>\n              </a>\n            `\n        )\n      : \"\"}\n  `;\n\nconst menuListTemplate = (menuList: Menu[], events: HeaderEvents) =>\n  html`\n    ${menuList !== undefined\n      ? menuList.map(\n          menu =>\n            html`\n              <a\n                @click=\"${() => events.onMenuItemClicked(menu)}\"\n                data-menu=\"${JSON.stringify(menu)}\"\n                class=\"dropdown-item cursor-pointer\"\n              >\n                ${menu.label}</a\n              >\n            `\n        )\n      : \"\"}\n  `;\n","export const euroWithoutFraction = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n  maximumFractionDigits: 0,\n  minimumFractionDigits: 0,\n});\n\nexport const euro = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nexport const percent = new Intl.NumberFormat(\"de-DE\", {\n  style: \"decimal\",\n  maximumFractionDigits: 2,\n  minimumFractionDigits: 2,\n});\n\nexport const monthAndYear = new Intl.DateTimeFormat(\"de-DE\", { month: \"long\", year: \"numeric\" });\n\nexport const kebapToCamelCase = (name: string): string =>\n  name.split(\"-\").reduce((text, token) => (text ? text + token[0].toLocaleUpperCase() + token.substr(1) : token), \"\");\n","import { html } from \"lit-html\";\nimport { SideBarEvents, SideBarState, SideBarMenuItem } from \"./sidebar\";\n\n// const acitveMenuClass = \"is-menu-active\";\nconst listClass = \"list-inline p-1 mb-1 pl-3 pr-3 cursor-pointer\";\nconst activeImageClass = \"sidebar-icon mr-2\";\nconst nameClass = \"sidebar-label ml-4\";\n\nconst sideBarListItems = (menuItems: SideBarMenuItem[], events: SideBarEvents) => {\n  return menuItems.map(menuItem => setlistItem(menuItem, events));\n};\n\nconst setlistItem = (menuItem: SideBarMenuItem, events: SideBarEvents) => html`\n  <a @click=\"${() => events.menuItemClick(menuItem)}\">\n    <li class=\"${listClass} ${menuItem.active ? \"active\" : \"\"}\">\n      <label class=\"w-100 cursor-pointer\"> ${icon(menuItem.icon)} ${listName(menuItem.label)} </label>\n    </li>\n  </a>\n`;\n\nconst icon = (source?: string) =>\n  source === undefined\n    ? html``\n    : html`\n        <img class=\"${activeImageClass}\" src=\"${source}\" />\n      `;\n\nconst listName = (name: string) => html`\n  <div class=\"${nameClass}\">${name}</div>\n`;\n\nexport const template = (state: SideBarState, events: SideBarEvents) => html`\n  <div class=\"wrapper\">\n    <nav\n      id=\"iapp-sidebar\"\n      class=\"border-right ${!state.isMenuToggled\n        ? \"opened ng-sidebar--opened\"\n        : \"d-none d-sm-none d-md-block d-lg-block ng-sidebar--closed\"}\"\n    >\n      <ul class=\"p-0 mt-4\">\n        ${sideBarListItems(state.sideBarMenuItems, events)}\n      </ul>\n    </nav>\n  </div>\n`;\n","/**\n * Import all non test files in this folder\n */\n// /^(?!.*spec\\.ts).*\\.ts$/ -> exclude spec.ts\nconst r = require.context(\"./\", true, /^(?!.*spec\\.ts).*\\.ts$/);\nr.keys().forEach(r);\n\nexport default {};\n","var map = {\n\t\"./all.ts\": 14,\n\t\"./header-sidebar/header-sidebar.tpl.ts\": 10,\n\t\"./header-sidebar/header-sidebar.ts\": 17,\n\t\"./header/header.tpl.ts\": 11,\n\t\"./header/header.ts\": 18,\n\t\"./sidebar/sidebar.tpl.ts\": 13,\n\t\"./sidebar/sidebar.ts\": 19\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 15;","import { render } from \"lit-html\";\n\nimport { template } from \"./header-sidebar.tpl\";\n// import { kebapToCamelCase } from \"iapps-shared/formats\";\n\nconst DEFAULT_STATE: HeaderState = {\n  connected: false,\n  content: ``,\n  headerContent: ``,\n  sidebarContent: `\n<iapps-sidebar>\n    <iapp-applications>\n        <iapp-application>\n            <application-id>10</application-id>\n            <application-url>/purchase-order-calender</application-url>\n            <category-id>1</category-id>\n            <category-url>/dashboard/goods-inbound</category-url>\n            <category-name>Goods Inbound</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/delivery.png</category-icon>\n        </iapp-application>\n        <iapp-application>\n            <application-id>11</application-id>\n            <application-url>/goods-recieving</application-url>\n            <category-id>1</category-id>\n            <category-url>/dashboard/goods-inbound</category-url>\n            <category-name>Goods Inbound</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/delivery.png</category-icon>\n        </iapp-application>\n        <iapp-application>\n            <application-id>12</application-id>\n            <application-url>/quatlity-control</application-url>\n            <category-id>1</category-id>\n            <category-url>/dashboard/goods-inbound</category-url>\n            <category-name>Goods Inbound</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/delivery.png</category-icon>\n        </iapp-application>\n        <iapp-application>\n            <application-id>13</application-id>\n            <application-url>/scheduler</application-url>\n            <category-id>2</category-id>\n            <category-url>/dashboard/production-prepration</category-url>\n            <category-name>Production Prepration</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/icon_production_preparation.png</category-icon>\n        </iapp-application>\n        <iapp-application>\n            <application-id>14</application-id>\n            <application-url>/update-status</application-url>\n            <category-id>3</category-id>\n            <category-url>/dashboard/toolshop</category-url>\n            <category-name>Tool Shop</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/icon_toolshop.png</category-icon>\n        </iapp-application>\n    </iapp-applications>\n</iapps-sidebar>\n    `,\n};\n\nexport class HeaderSidebarComponent extends HTMLElement {\n  private static PASS_THROUGH_FIELDS = [\"menu-icon\", \"nav-logo\", \"user-name\", \"selected-plant\", \"selected-language\"];\n\n  static get observedAttributes() {\n    return [...HeaderSidebarComponent.PASS_THROUGH_FIELDS];\n  }\n\n  private state: HeaderState = { ...DEFAULT_STATE };\n\n  // private state: HtmlState = { dataContent: \"\" };\n\n  public connectedCallback() {\n    this.getHtmlHeaderContent();\n  }\n\n  private getMenuClickEvent() {\n    const triggerMenuSelection: any = document.querySelector(\"iapps-header\");\n    triggerMenuSelection.addEventListener(\"selectedPlantChoice\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"menu selection\");\n      // this.updateState(\"isMenuToggleReady\", !this.state.isMenuToggleReady);\n    });\n  }\n\n  private getPlantClickEvent() {\n    const triggerPlantSelection: any = document.querySelector(\"iapps-header\");\n    triggerPlantSelection.addEventListener(\"selectedMenuChoice\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"Plant selection\");\n    });\n  }\n\n  private getLanguageClickEvent() {\n    const triggerLanguageSelection: any = document.querySelector(\"iapps-header\");\n    triggerLanguageSelection.addEventListener(\"selectedLanguageChoice\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"Language selection\");\n    });\n  }\n\n  private onClickLogoEvent() {\n    const triggerOnLogoClick: any = document.querySelector(\"iapps-header\");\n    triggerOnLogoClick.addEventListener(\"onClickLogo\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"on Click Logo\");\n    });\n  }\n\n  private onClickMainMenuEvent() {\n    const triggerOnLogoClick: any = document.querySelector(\"iapps-header\");\n    triggerOnLogoClick.addEventListener(\"onClickMainMenu\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"on Click Main menu\");\n    });\n  }\n\n  private async getHtmlHeaderContent(): Promise<HtmlContent | null> {\n    const respHeader = await window.fetch(\"/components/preview/industry-apps-header--user-header\");\n    await respHeader.text().then(text1 => {\n      this.state.headerContent = text1;\n      return new DOMParser().parseFromString(text1, \"text/xml\");\n    });\n    const respSidebar = await window.fetch(\"/components/preview/industry-apps-side-bar\");\n    await respSidebar.text().then(text1 => {\n      this.state.sidebarContent = text1;\n      return new DOMParser().parseFromString(text1, \"text/xml\");\n    });\n\n    this.updateState(\"headerContent\", this.state.headerContent);\n    this.updateState(\"sidebarContent\", this.state.sidebarContent);\n\n    this.getMenuClickEvent();\n    this.getPlantClickEvent();\n    this.getLanguageClickEvent();\n    this.onClickLogoEvent();\n    this.onClickMainMenuEvent();\n    return \"text\";\n  }\n\n  private render() {\n    render(template(this.state), this, { eventContext: this });\n  }\n\n  private updateState(name: string, payload: string | boolean) {\n    // let state = this.state;\n    this.state = { ...this.state, [name]: payload };\n    this.render();\n  }\n}\n\nexport interface HeaderState extends HeaderProps {\n  connected: boolean;\n  content: string;\n  headerContent: HtmlData;\n  sidebarContent: HtmlData;\n}\n\nexport interface HeaderProps {\n  menuIcon?: string;\n  navLogo?: string;\n  userName?: string;\n  selectedPlant?: string;\n  selectedLanguage?: string;\n}\n\ntype HtmlData = string;\n\ntype HtmlContent = string;\n\ncustomElements.define(\"iapps-header-sidebar\", HeaderSidebarComponent);\n","import { render } from \"lit-html\";\n\nimport { template } from \"./header.tpl\";\nimport { kebapToCamelCase } from \"iapps-shared/formats\";\n\nconst DEFAULT_STATE: HeaderState = {\n  connected: false,\n  hideDropElementMobile: false,\n  plantListHidden: false,\n  plantTemplateListHidden: false,\n  languageListHidden: false,\n  languageTemplateListHidden: false,\n  showLanguagleList: true,\n  showPlantList: true,\n  menuListHidden: false,\n  plants: [],\n  languages: [],\n  menus: [],\n};\n\nexport class HeaderComponent extends HTMLElement {\n  private static PASS_THROUGH_FIELDS = [\"menu-icon\", \"nav-logo\", \"user-name\", \"selected-plant\", \"selected-language\"];\n  static get observedAttributes() {\n    return [...HeaderComponent.PASS_THROUGH_FIELDS];\n  }\n\n  private state: HeaderState = { ...DEFAULT_STATE };\n\n  public connectedCallback() {\n    // tslint:disable-next-line: no-console\n    // console.log(\"state\", this.state);\n    if (!this.state.connected) {\n      this.updatePlant();\n      this.updateLanguage();\n      this.updateMenu();\n      this.updateState(\"connected\", true);\n    }\n  }\n\n  public disConnectedCallback() {\n    this.updateState(\"connected\", false);\n  }\n\n  private updateMenu() {\n    const menuListElement = this.querySelector(\"iapps-header-menu-list\") as HTMLElement;\n    const menuListCollection: HTMLCollection = menuListElement.children;\n    const menuListArray = [].slice.call(menuListCollection);\n    const menus: Menu[] = new Array();\n    for (const menuArrayItem of menuListArray) {\n      const menuElement = menuArrayItem as HTMLElement;\n      const menu: Menu = {\n        url: (menuElement.querySelector(\"main-menu-url\") as HTMLElement).innerHTML,\n        label: (menuElement.querySelector(\"main-menu-label\") as HTMLElement).innerHTML,\n      };\n      menus.push(menu);\n    }\n    if (!menuListElement) {\n      this.updateState(\"menus\", \"\");\n      return;\n    }\n    this.updateState(\"menus\", menus);\n  }\n\n  private updateLanguage() {\n    const languageListElement = this.querySelector(\"iapps-header-language-list\") as HTMLElement;\n    if (!languageListElement) {\n      this.updateState(\"showLanguagleList\", false);\n      return;\n    }\n\n    const languageListCollection: HTMLCollection = languageListElement.children;\n    const languageListArray = [].slice.call(languageListCollection);\n    const languages: Language[] = new Array();\n    for (const languageArrayItem of languageListArray) {\n      const languageElement = languageArrayItem as HTMLElement;\n      const language: Language = {\n        id: parseInt((languageElement.querySelector(\"language-id\") as HTMLElement).innerHTML, 0),\n        icon: (languageElement.querySelector(\"language-icon\") as HTMLElement).innerHTML,\n        name: (languageElement.querySelector(\"language-name\") as HTMLElement).innerHTML,\n      };\n      languages.push(language);\n    }\n    this.updateState(\"languages\", languages);\n  }\n\n  private updatePlant() {\n    const plantListElement = this.querySelector(\"iapps-header-plant-list\") as HTMLElement;\n    if (!plantListElement) {\n      this.updateState(\"showPlantList\", false);\n      return;\n    }\n\n    const plantListCollection: HTMLCollection = plantListElement.children;\n    const plantListArray = [].slice.call(plantListCollection);\n    const plants: Plant[] = new Array();\n    for (const plantArrayItem of plantListArray) {\n      const plantElement = plantArrayItem as HTMLElement;\n      const plant: Plant = {\n        id: parseInt((plantElement.querySelector(\"plant-id\") as HTMLElement).innerHTML, 0),\n        name: (plantElement.querySelector(\"plant-name\") as HTMLElement).innerHTML,\n      };\n      plants.push(plant);\n    }\n\n    this.updateState(\"plants\", plants);\n  }\n\n  private render() {\n    render(\n      template(this.state, {\n        hidePlantList: () => {\n          if (screen.width > 767) {\n            this.updateState(\"plantListHidden\", !this.state.plantListHidden);\n          } else {\n            this.updateState(\"plantTemplateListHidden\", !this.state.plantTemplateListHidden);\n          }\n        },\n        hideLanguageList: () => {\n          if (screen.width > 767) {\n            this.updateState(\"languageListHidden\", !this.state.languageListHidden);\n          } else {\n            this.updateState(\"languageTemplateListHidden\", !this.state.languageTemplateListHidden);\n          }\n        },\n        hideMenuList: () => {\n          this.updateState(\"menuListHidden\", !this.state.menuListHidden);\n        },\n        toggleSidebar: event => {\n          const toggleMenuClick = new CustomEvent(\"toggleMenuClick\", { detail: { event } });\n          this.dispatchEvent(toggleMenuClick);\n        },\n        toggleDropDownMobile: () => {\n          this.updateState(\"hideDropElementMobile\", !this.state.hideDropElementMobile);\n          // console.log(this.state.hideDropElementMobile);\n        },\n        onPlantItemClicked: event => {\n          if (screen.width > 767) {\n            this.updateState(\"plantListHidden\", !this.state.plantListHidden);\n          } else {\n            this.updateState(\"plantTemplateListHidden\", !this.state.plantTemplateListHidden);\n          }\n          // tslint:disable-next-line: no-console\n          // console.log(event);\n          const selectedPlantElement = event.target as HTMLElement;\n          if (selectedPlantElement != null) {\n            const selectedPlantJSONString = selectedPlantElement.getAttribute(\"data-plant\") as string;\n            const selectedPlant: Plant = JSON.parse(selectedPlantJSONString);\n            this.updateState(\"selected-plant\", selectedPlant.name);\n            const selectedPlantChoice = new CustomEvent(\"selectedPlantChoice\", { detail: { event } });\n            this.dispatchEvent(selectedPlantChoice);\n          }\n        },\n        onLanguageItemClicked: event => {\n          if (screen.width > 767) {\n            this.updateState(\"languageListHidden\", !this.state.languageListHidden);\n          } else {\n            this.updateState(\"languageTemplateListHidden\", !this.state.languageTemplateListHidden);\n          }\n          // tslint:disable-next-line: no-console\n          // console.log(event);\n          const selectedLanguageElement = event.target as HTMLElement;\n          if (selectedLanguageElement != null) {\n            const selectedLanguageJSONString = selectedLanguageElement.getAttribute(\"data-language\") as string;\n            const selectedLanguage: Plant = JSON.parse(selectedLanguageJSONString);\n            this.updateState(\"selected-language\", selectedLanguage.name);\n            const selectedLanguageChoice = new CustomEvent(\"selectedLanguageChoice\", { detail: { event } });\n            this.dispatchEvent(selectedLanguageChoice);\n          }\n        },\n        onMenuItemClicked: (menu: Menu) => {\n          this.updateState(\"menuListHidden\", !this.state.menuListHidden);\n          // tslint:disable-next-line: no-console\n          // console.log(menu);\n          const menuItemClickEvent = new CustomEvent(\"selectedMenuChoice\", { detail: { menu } });\n          this.dispatchEvent(menuItemClickEvent);\n        },\n        onLogoClick: () => {\n          const onClickLogo = new CustomEvent(\"onClickLogo\", { detail: { event } });\n          this.dispatchEvent(onClickLogo);\n        },\n        mainMenuIconClick: () => {\n          const onClickMainmenuIcon = new CustomEvent(\"onClickMainMenu\", { detail: { event } });\n          this.dispatchEvent(onClickMainmenuIcon);\n        },\n      }),\n      this,\n      { eventContext: this }\n    );\n  }\n\n  public attributeChangedCallback(name: string, _oldValue: string, newValue: string | boolean) {\n    this.updateState(name, newValue);\n  }\n\n  private updateState(name: string, payload: string | boolean | Plant[] | Language[] | Menu[]) {\n    let state = this.state;\n    switch (name) {\n      case \"connected\":\n        state = { ...this.state, connected: Boolean(payload) };\n        break;\n      default:\n        name = kebapToCamelCase(name);\n        if (state[name as keyof HeaderState] === payload) {\n          break;\n        }\n        state = { ...state, [name]: payload };\n        break;\n    }\n    const redraw = state !== this.state;\n    this.state = state;\n    if (this.state.connected && redraw) {\n      this.render();\n    }\n  }\n}\n\nexport interface HeaderProps {\n  menuIcon?: string;\n  navLogo?: string;\n  userName?: string;\n  selectedPlant?: string;\n  selectedLanguage?: string;\n}\n\nexport interface HeaderState extends HeaderProps {\n  connected: boolean;\n  hideDropElementMobile: boolean;\n  plantListHidden: boolean;\n  plantTemplateListHidden: boolean;\n  languageListHidden: boolean;\n  languageTemplateListHidden: boolean;\n  showLanguagleList: boolean;\n  showPlantList: boolean;\n  menuListHidden: boolean;\n  plants: Plant[];\n  languages: Language[];\n  menus: Menu[];\n}\n\nexport interface HeaderEvents {\n  hidePlantList: () => void;\n  toggleDropDownMobile: () => void;\n  hideLanguageList: () => void;\n  hideMenuList: () => void;\n  toggleSidebar: (e: Event) => void;\n  onPlantItemClicked: (e: Event) => void;\n  onLanguageItemClicked: (e: Event) => void;\n  onMenuItemClicked: (e: Menu) => void;\n  onLogoClick: () => void;\n  mainMenuIconClick: () => void;\n}\n\nexport interface Plant {\n  id: number;\n  name: string;\n}\n\nexport interface Language {\n  id: number;\n  icon: string;\n  name: string;\n}\n\nexport interface Menu {\n  url: string;\n  label: string;\n}\n\ncustomElements.define(\"iapps-header\", HeaderComponent);\n","import { kebapToCamelCase } from \"iapps-shared/formats\";\nimport { render } from \"lit-html\";\nimport { template } from \"./sidebar.tpl\";\n\nconst MOBILE_WIDTH = 767;\n\nconst DEFAULT_STATE: SideBarState = {\n  connected: false,\n  isMobile: false,\n  isMenuToggled: false,\n  sideBarMenuItems: [],\n};\n\nconst body = document.body;\n\nconst SIDEBAR_ELEMENT_TAGS = {\n  label: \"category-name\",\n  icon: \"category-icon\",\n  categoryID: \"category-id\",\n  href: \"category-url\",\n};\n\nclass SideBarComponent extends HTMLElement {\n  private static PASS_THROUGH_FIELDS = [\"reload-page\"];\n\n  static get observedAttributes() {\n    return [...SideBarComponent.PASS_THROUGH_FIELDS];\n  }\n\n  private state: SideBarState = { ...DEFAULT_STATE };\n\n  constructor() {\n    super();\n    this.state = { ...DEFAULT_STATE };\n  }\n\n  public attributeChangedCallback(name: string, _oldValue: string | boolean, newValue: string | boolean) {\n    // tslint:disable-next-line: no-console\n    // console.log(\"attributeChangedCallback\", name, _oldValue, newValue, typeof newValue);\n    this.updateState(name, newValue);\n  }\n\n  public connectedCallback() {\n    // tslint:disable-next-line: no-console\n    // console.log(\"sidebar state\", this.state);\n    if (!this.state.connected) {\n      this.prepareSidebarMenuItems();\n      this.prepareSidebar();\n      this.updateState(\"connected\", true);\n    }\n  }\n\n  public disConnectedCallback() {\n    this.updateState(\"connected\", false);\n  }\n\n  private updateState(name: string, payload: string | boolean | SideBarMenuItem[] | SideBarMenuItem) {\n    let state = this.state;\n    switch (name) {\n      case \"connected\":\n        state = { ...this.state, connected: Boolean(payload) };\n        break;\n      default:\n        name = kebapToCamelCase(name);\n        if (state[name as keyof SideBarState] === payload) {\n          break;\n        }\n        state = { ...state, [name]: payload };\n        break;\n    }\n\n    const redraw = state !== this.state;\n    this.state = state;\n\n    if (this.state.connected && redraw) {\n      this.render();\n    }\n  }\n\n  private render() {\n    render(\n      template(this.state, {\n        menuItemClick: (menuItem: SideBarMenuItem) => {\n          if (menuItem.active) {\n            return;\n          }\n          this.state.sideBarMenuItems.map((item: SideBarMenuItem) => {\n            item.active = menuItem.categoryID === item.categoryID;\n          });\n          const url = menuItem.href;\n          // tslint:disable-next-line: no-console\n          // console.log(\"url==> \", url, this.state.reloadPage, window.location.origin);\n          if (this.state.reloadPage && String(this.state.reloadPage) === \"true\") {\n            window.location.href = window.location.origin + url;\n          } else {\n            const menuItemClickEvent = new CustomEvent(\"menuItemClicked\", { detail: { url } });\n            this.dispatchEvent(menuItemClickEvent);\n          }\n          this.updateState(\"activeMenuItem\", menuItem);\n        },\n      }),\n      this,\n      { eventContext: this }\n    );\n  }\n\n  private prepareSidebarMenuItems(): void {\n    const iappApplicationElement = this.querySelector(\"iapp-applications\") as HTMLElement;\n\n    if (iappApplicationElement === undefined || !iappApplicationElement) {\n      this.updateState(\"sideBarMenuItems\", \"\");\n      return;\n    }\n\n    const menuListCollection: HTMLCollection = iappApplicationElement.children;\n    const navItemListArray = [].slice.call(menuListCollection);\n    const sidebarMenuItems: SideBarMenuItem[] = new Array();\n    navItemListArray.forEach((navItem: any) => {\n      const navElement = navItem as HTMLElement;\n      const menuItem: SideBarMenuItem = {\n        label: (navElement.querySelector(SIDEBAR_ELEMENT_TAGS.label) as HTMLElement).innerHTML,\n        icon: (navElement.querySelector(SIDEBAR_ELEMENT_TAGS.icon) as HTMLElement).innerHTML,\n        href: (navElement.querySelector(SIDEBAR_ELEMENT_TAGS.href) as HTMLElement).innerHTML,\n        categoryID: parseInt((navElement.querySelector(SIDEBAR_ELEMENT_TAGS.categoryID) as HTMLElement).innerHTML, 0),\n      };\n      sidebarMenuItems.push(menuItem);\n    });\n\n    const filteredMenuItems = this.filterDuplicates(sidebarMenuItems);\n    const sideBarMenuItems = this.setActiveMenuItem(filteredMenuItems);\n    this.updateState(\"sideBarMenuItems\", sideBarMenuItems);\n  }\n\n  private prepareSidebar(): void {\n    if (screen.width <= MOBILE_WIDTH) {\n      this.updateState(\"isMobile\", true);\n      this.updateState(\"isMenuToggled\", true);\n    } else {\n      body.classList.add(\"opened\");\n    }\n    if (document.querySelector(\"iapps-header\")) {\n      const headerElement: any = document.querySelector(\"iapps-header\");\n      headerElement.addEventListener(\"toggleMenuClick\", () => {\n        this.toggleSidebar();\n      });\n    }\n  }\n\n  private toggleSidebar() {\n    this.state.isMenuToggled ? body.classList.add(\"opened\") : body.classList.remove(\"opened\");\n    this.updateState(\"isMenuToggled\", !this.state.isMenuToggled);\n  }\n\n  private filterDuplicates(menuItems: SideBarMenuItem[]) {\n    const categoryIds = Array.from(new Set(menuItems.map(menu => menu.categoryID)));\n    const navBarMenuItems: SideBarMenuItem[] = new Array();\n    categoryIds.forEach(categoryID => {\n      const navItem = menuItems.find(menu => menu.categoryID === categoryID);\n      if (navItem !== undefined) {\n        navBarMenuItems.push(navItem);\n      }\n    });\n    return navBarMenuItems;\n  }\n\n  private setActiveMenuItem(sideBarMenuItems: SideBarMenuItem[]): SideBarMenuItem[] {\n    const currentURL = window.location.href.replace(window.location.origin, \"\");\n    // tslint:disable-next-line: no-console\n    // console.log(\"currentURL==> \", currentURL);\n    sideBarMenuItems.map((menuItem: any) => {\n      if (menuItem.href === currentURL) {\n        menuItem.active = true;\n        this.updateState(\"activeMenuItem\", menuItem);\n      } else {\n        menuItem.active = false;\n      }\n    });\n    // tslint:disable-next-line: no-console\n    // console.log(sideBarMenuItems);\n    return sideBarMenuItems;\n  }\n}\n\ninterface SideBarProps {\n  reloadPage?: boolean;\n}\n\nexport interface SideBarState extends SideBarProps {\n  connected: boolean;\n  isMenuToggled: boolean;\n  isMobile: boolean;\n  sideBarMenuItems: SideBarMenuItem[];\n  activeMenuItem?: SideBarMenuItem;\n}\n\nexport interface SideBarMenuItem {\n  categoryID: number;\n  label: string;\n  icon: string;\n  href: string;\n  active?: boolean;\n}\n\nexport interface SideBarEvents {\n  menuItemClick: (list: SideBarMenuItem) => void;\n}\n\ncustomElements.define(\"iapps-sidebar\", SideBarComponent);\n"],"sourceRoot":""}