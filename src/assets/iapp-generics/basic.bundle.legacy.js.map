{"version":3,"sources":["webpack:///./src/basic/header-sidebar/header-sidebar.tpl.ts","webpack:///./src/basic/header/header.tpl.ts","webpack:///./src/shared/formats.ts","webpack:///./src/basic/sidebar/sidebar.tpl.ts","webpack:///./src/basic/all.ts","webpack:///.*spec\\.ts).*\\.ts$","webpack:///./src/basic/header-sidebar/header-sidebar.ts","webpack:///./src/basic/header/header.ts","webpack:///./src/basic/sidebar/sidebar.ts"],"names":["template","state","headerContent","sidebarContent","events","mainMenuIconClick","menuIcon","navLogo","onLogoClick","toggleSidebar","hideMenuList","menuListHidden","userName","menuListTemplate","menus","showLanguagleList","hideLanguageList","selectedLanguage","languageListHidden","languageListTemplate","languages","showPlantList","hidePlantList","selectedPlant","plantListHidden","plantListTemplate","plants","mobileDropDownSelection","hideDropElementMobile","plantListTemplateForMobile","languageListTemplateForMobile","toggleDropDownMobile","plantList","plantTemplateListHidden","undefined","map","plant","onPlantItemClicked","JSON","stringify","name","langList","languageTemplateListHidden","language","onLanguageItemClicked","icon","menuList","menu","onMenuItemClicked","label","Intl","NumberFormat","style","currency","maximumFractionDigits","minimumFractionDigits","DateTimeFormat","month","year","kebapToCamelCase","split","reduce","text","token","toLocaleUpperCase","substr","setlistItem","menuItem","menuItemClick","active","listName","source","isMenuToggled","menuItems","sideBarListItems","sideBarMenuItems","r","keys","forEach","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","Object","resolve","module","exports","DEFAULT_STATE","connected","content","HeaderSidebarComponent","PASS_THROUGH_FIELDS","connectedCallback","this","getHtmlHeaderContent","getMenuClickEvent","document","querySelector","addEventListener","getPlantClickEvent","getLanguageClickEvent","onClickLogoEvent","onClickMainMenuEvent","Promise","window","fetch","then","text1","DOMParser","parseFromString","updateState","render","eventContext","payload","HTMLElement","customElements","define","HeaderComponent","updatePlant","updateLanguage","updateMenu","disConnectedCallback","menuListElement","menuListCollection","children","menuListArray","slice","call","Array","menuElement","url","innerHTML","push","languageListElement","languageListCollection","languageListArray","languageElement","parseInt","plantListElement","plantListCollection","plantListArray","plantElement","screen","width","event","toggleMenuClick","CustomEvent","detail","dispatchEvent","selectedPlantElement","target","selectedPlantJSONString","getAttribute","parse","selectedPlantChoice","selectedLanguageElement","selectedLanguageJSONString","selectedLanguageChoice","menuItemClickEvent","onClickLogo","onClickMainmenuIcon","attributeChangedCallback","_oldValue","newValue","Boolean","redraw","isMobile","body","SIDEBAR_ELEMENT_TAGS","SideBarComponent","prepareSidebarMenuItems","prepareSidebar","item","categoryID","href","reloadPage","String","location","origin","iappApplicationElement","navItemListArray","sidebarMenuItems","navItem","navElement","filteredMenuItems","filterDuplicates","setActiveMenuItem","classList","add","remove","categoryIds","from","Set","navBarMenuItems","find","currentURL","replace"],"mappings":"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","file":"basic.bundle.legacy.js","sourcesContent":["import { html } from \"lit-html\";\n\nimport { HeaderState } from \"./header-sidebar\";\nimport { unsafeHTML } from \"lit-html/directives/unsafe-html.js\";\n\nexport const template = (state: HeaderState) => html`\n  <div id=\"header\">${unsafeHTML(state.headerContent)}</div>\n  <div id=\"sidebar\">${unsafeHTML(state.sidebarContent)}</div>\n`;\n","import { html } from \"lit-html\";\n\nimport { HeaderState, HeaderEvents, Plant, Language, Menu } from \"./header\";\n\nexport const template = (state: HeaderState, events: HeaderEvents) => html`\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-light border-bottom pl-0 pr-0\">\n    <div class=\"col-8 col-md-6\">\n      <a class=\"navbar-brand\" href=\"/dashboard\" @click=${events.mainMenuIconClick}><img src=\"${state.menuIcon}\"/></a>\n      <img class=\"cursor-pointer img-logo\" src=\"${state.navLogo}\" @click=${events.onLogoClick} />\n      <i\n        @click=\"${events.toggleSidebar}\"\n        class=\"px-3 py-1 fa fa-bars text-secondary cursor-pointer\"\n        aria-hidden=\"true\"\n      ></i>\n    </div>\n    <div class=\"col-4 col-md-6\">\n      <div class=\"\" id=\"iapp-main-navbar-collapse\">\n        <ul class=\"d-flex flex-row-reverse navbar-nav ml-auto\">\n          <li class=\"nav-item dropdown\">\n            <button\n              @click=\"${events.hideMenuList}\"\n              class=\"btn\"\n              type=\"button\"\n              id=\"dropdownLogoutMenuSelect\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n            >\n              <i class=\"fa fa-ellipsis-v\" aria-hidden=\"true\"></i>\n            </button>\n            <div\n              class=\"dropdown-menu position-absolute dropdown-menu-right ${state.menuListHidden ? \"show\" : \"\"}\"\n              aria-labelledby=\"dropdownLogoutMenuSelect\"\n            >\n              <a class=\"d-block d-sm-none dropdown-item border-bottom\">Hi, <b>${state.userName}</b></a>\n              ${menuListTemplate(state.menus as Menu[], events)}\n            </div>\n          </li>\n          <li class=\"nav-item dropdown mr-3 ${!state.showLanguagleList ? \"d-none\" : \"d-none d-sm-none d-md-block\"}\">\n            <button\n              @click=\"${events.hideLanguageList}\"\n              class=\"btn border dropdown-toggle\"\n              type=\"button\"\n              id=\"dropdownCountrySelect\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n            >\n              <img\n                class=\"mr-1\"\n                height=\"15\"\n                width=\"15\"\n                src=\"https://iappsdemo.fliplabs.net/IndustryAppFe/assets//images/flag_united_kingdom.png\"\n              />\n              <span>${state.selectedLanguage}</span>\n            </button>\n            <div\n              class=\"dropdown-menu dropdown-menu-right ${state.languageListHidden ? \"show\" : \"\"}\"\n              aria-labelledby=\"dropdownCountrySelect\"\n            >\n              ${languageListTemplate(state.languages as Language[], events)}\n            </div>\n          </li>\n          <li class=\"nav-item dropdown mr-3 ${!state.showPlantList ? \"d-none\" : \"d-none d-sm-none d-md-block\"}\">\n            <button\n              @click=\"${events.hidePlantList}\"\n              class=\"btn border dropdown-toggle\"\n              type=\"button\"\n              id=\"dropdownRegionSelect\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n            >\n              <span>${state.selectedPlant}</span>\n            </button>\n            <div\n              class=\"dropdown-menu dropdown-menu-right ${state.plantListHidden ? \"show\" : \"\"}\"\n              aria-labelledby=\"dropdownRegionSelect\"\n            >\n              ${plantListTemplate(state.plants as Plant[], events)}\n            </div>\n          </li>\n          <li class=\"d-block d-md-none nav-item dropdown mr-3\">${mobileDropDownSelection(events, state)}</li>\n          <li class=\"d-none d-sm-block nav-item dropdown mr-3\">\n            <div class=\"navbar-text\">Hi, <b>${state.userName}</b></div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n  <div\n    class=\"col-12 position-absolute p-0 ${!state.hideDropElementMobile\n      ? \"d-none d-sm-none\"\n      : \"d-block d-sm-block d-md-none\"}\"\n  >\n    ${plantListTemplateForMobile(state.plants as Plant[], events, state)}\n    ${languageListTemplateForMobile(state.languages as Language[], events, state)}\n  </div>\n`;\n\nconst mobileDropDownSelection = (events: HeaderEvents, state: HeaderState) => html`\n  <i\n    class=\"fa fa-chevron-circle-down p-2 default-icon-color cursor-pointer mt-1 ${state.hideDropElementMobile\n      ? \"d-none d-sm-none\"\n      : \"\"}\"\n    aria-hidden=\"true\"\n    @click=\"${events.toggleDropDownMobile}\"\n  ></i>\n  <i\n    class=\"fa fa-chevron-circle-up p-2 default-icon-color cursor-pointer mt-1 ${!state.hideDropElementMobile\n      ? \"d-none d-sm-none\"\n      : \"\"}\"\n    aria-hidden=\"true\"\n    @click=\"${events.toggleDropDownMobile}\"\n  ></i>\n`;\n\nconst plantListTemplateForMobile = (plantList: Plant[], events: HeaderEvents, state: HeaderState) => html`\n  <button\n    @click=\"${events.hidePlantList}\"\n    class=\"btn border-bottom w-100 dropdown-toggle text-right rounded-0\"\n    type=\"button\"\n    id=\"dropdownFullPlantSelect\"\n    data-toggle=\"dropdown\"\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    <span class=\"float-left\">${state.selectedPlant}</span>\n  </button>\n  <div\n    class=\"dropdown-menu w-100 dropdown-menu-right ${state.plantTemplateListHidden ? \"show\" : \"\"}\"\n    aria-labelledby=\"dropdownFullPlantSelect\"\n  >\n    ${plantList !== undefined\n      ? plantList.map(\n          plant => html`\n            <a @click=${events.onPlantItemClicked} data-plant=\"${JSON.stringify(plant)}\" class=\"dropdown-item \"\n              ><span data-plant=\"${JSON.stringify(plant)}\">${plant.name}</span></a\n            >\n          `\n        )\n      : \"\"}\n  </div>\n`;\nconst languageListTemplateForMobile = (langList: Language[], events: HeaderEvents, state: HeaderState) => html`\n  <button\n    @click=\"${events.hideLanguageList}\"\n    class=\"btn border-bottom w-100 dropdown-toggle text-right rounded-0 ${state.plantTemplateListHidden\n      ? \"d-none d-sm-none\"\n      : \"\"}\"\n    type=\"button\"\n    id=\"dropdownFullCountrySelect\"\n    data-toggle=\"dropdown\"\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  >\n    <div class=\"float-left\">\n      <img\n        class=\"mr-1\"\n        height=\"15\"\n        width=\"15\"\n        src=\"https://iappsdemo.fliplabs.net/IndustryAppFe/assets//images/flag_united_kingdom.png\"\n      />\n      <span>${state.selectedLanguage}</span>\n    </div>\n  </button>\n  <div\n    class=\"dropdown-menu w-100 dropdown-menu-right ${state.languageTemplateListHidden ? \"show\" : \"\"}\"\n    aria-labelledby=\"dropdownFullCountrySelect\"\n  >\n    ${langList !== undefined\n      ? langList.map(\n          language => html`\n            <a @click=${events.onLanguageItemClicked} data-language=\"${JSON.stringify(language)}\" class=\"dropdown-item\"\n              ><img class=\"mr-1\" height=\"15\" width=\"15\" src=\"${language.icon}\" />\n              <span data-language=\"${JSON.stringify(language)}\">${language.name}</span>\n            </a>\n          `\n        )\n      : \"\"}\n  </div>\n`;\n\nconst plantListTemplate = (plantList: Plant[], events: HeaderEvents) =>\n  html`\n    ${plantList !== undefined\n      ? plantList.map(\n          plant =>\n            html`\n              <a @click=${events.onPlantItemClicked} data-plant=\"${JSON.stringify(plant)}\" class=\"dropdown-item\"\n                ><span data-plant=\"${JSON.stringify(plant)}\">${plant.name}</span></a\n              >\n            `\n        )\n      : \"\"}\n  `;\n\nconst languageListTemplate = (langList: Language[], events: HeaderEvents) =>\n  html`\n    ${langList !== undefined\n      ? langList.map(\n          language =>\n            html`\n              <a\n                @click=${events.onLanguageItemClicked}\n                data-language=\"${JSON.stringify(language)}\"\n                class=\"dropdown-item\"\n                ><img class=\"mr-1\" height=\"15\" width=\"15\" src=\"${language.icon}\" />\n                <span data-language=\"${JSON.stringify(language)}\">${language.name}</span>\n              </a>\n            `\n        )\n      : \"\"}\n  `;\n\nconst menuListTemplate = (menuList: Menu[], events: HeaderEvents) =>\n  html`\n    ${menuList !== undefined\n      ? menuList.map(\n          menu =>\n            html`\n              <a\n                @click=\"${() => events.onMenuItemClicked(menu)}\"\n                data-menu=\"${JSON.stringify(menu)}\"\n                class=\"dropdown-item cursor-pointer\"\n              >\n                ${menu.label}</a\n              >\n            `\n        )\n      : \"\"}\n  `;\n","export const euroWithoutFraction = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n  maximumFractionDigits: 0,\n  minimumFractionDigits: 0,\n});\n\nexport const euro = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nexport const percent = new Intl.NumberFormat(\"de-DE\", {\n  style: \"decimal\",\n  maximumFractionDigits: 2,\n  minimumFractionDigits: 2,\n});\n\nexport const monthAndYear = new Intl.DateTimeFormat(\"de-DE\", { month: \"long\", year: \"numeric\" });\n\nexport const kebapToCamelCase = (name: string): string =>\n  name.split(\"-\").reduce((text, token) => (text ? text + token[0].toLocaleUpperCase() + token.substr(1) : token), \"\");\n","import { html } from \"lit-html\";\nimport { SideBarEvents, SideBarState, SideBarMenuItem } from \"./sidebar\";\n\n// const acitveMenuClass = \"is-menu-active\";\nconst listClass = \"list-inline p-1 mb-1 pl-3 pr-3 cursor-pointer\";\nconst activeImageClass = \"sidebar-icon mr-2\";\nconst nameClass = \"sidebar-label ml-4\";\n\nconst sideBarListItems = (menuItems: SideBarMenuItem[], events: SideBarEvents) => {\n  return menuItems.map(menuItem => setlistItem(menuItem, events));\n};\n\nconst setlistItem = (menuItem: SideBarMenuItem, events: SideBarEvents) => html`\n  <a @click=\"${() => events.menuItemClick(menuItem)}\">\n    <li class=\"${listClass} ${menuItem.active ? \"active\" : \"\"}\">\n      <label class=\"w-100 cursor-pointer\"> ${icon(menuItem.icon)} ${listName(menuItem.label)} </label>\n    </li>\n  </a>\n`;\n\nconst icon = (source?: string) =>\n  source === undefined\n    ? html``\n    : html`\n        <img class=\"${activeImageClass}\" src=\"${source}\" />\n      `;\n\nconst listName = (name: string) => html`\n  <div class=\"${nameClass}\">${name}</div>\n`;\n\nexport const template = (state: SideBarState, events: SideBarEvents) => html`\n  <div class=\"wrapper\">\n    <nav\n      id=\"iapp-sidebar\"\n      class=\"border-right ${!state.isMenuToggled\n        ? \"opened ng-sidebar--opened\"\n        : \"d-none d-sm-none d-md-block d-lg-block ng-sidebar--closed\"}\"\n    >\n      <ul class=\"p-0 mt-4\">\n        ${sideBarListItems(state.sideBarMenuItems, events)}\n      </ul>\n    </nav>\n  </div>\n`;\n","/**\n * Import all non test files in this folder\n */\n// /^(?!.*spec\\.ts).*\\.ts$/ -> exclude spec.ts\nconst r = require.context(\"./\", true, /^(?!.*spec\\.ts).*\\.ts$/);\nr.keys().forEach(r);\n\nexport default {};\n","var map = {\n\t\"./all.ts\": 14,\n\t\"./header-sidebar/header-sidebar.tpl.ts\": 10,\n\t\"./header-sidebar/header-sidebar.ts\": 17,\n\t\"./header/header.tpl.ts\": 11,\n\t\"./header/header.ts\": 18,\n\t\"./sidebar/sidebar.tpl.ts\": 13,\n\t\"./sidebar/sidebar.ts\": 19\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 15;","import { render } from \"lit-html\";\n\nimport { template } from \"./header-sidebar.tpl\";\n// import { kebapToCamelCase } from \"iapps-shared/formats\";\n\nconst DEFAULT_STATE: HeaderState = {\n  connected: false,\n  content: ``,\n  headerContent: ``,\n  sidebarContent: `\n<iapps-sidebar>\n    <iapp-applications>\n        <iapp-application>\n            <application-id>10</application-id>\n            <application-url>/purchase-order-calender</application-url>\n            <category-id>1</category-id>\n            <category-url>/dashboard/goods-inbound</category-url>\n            <category-name>Goods Inbound</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/delivery.png</category-icon>\n        </iapp-application>\n        <iapp-application>\n            <application-id>11</application-id>\n            <application-url>/goods-recieving</application-url>\n            <category-id>1</category-id>\n            <category-url>/dashboard/goods-inbound</category-url>\n            <category-name>Goods Inbound</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/delivery.png</category-icon>\n        </iapp-application>\n        <iapp-application>\n            <application-id>12</application-id>\n            <application-url>/quatlity-control</application-url>\n            <category-id>1</category-id>\n            <category-url>/dashboard/goods-inbound</category-url>\n            <category-name>Goods Inbound</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/delivery.png</category-icon>\n        </iapp-application>\n        <iapp-application>\n            <application-id>13</application-id>\n            <application-url>/scheduler</application-url>\n            <category-id>2</category-id>\n            <category-url>/dashboard/production-prepration</category-url>\n            <category-name>Production Prepration</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/icon_production_preparation.png</category-icon>\n        </iapp-application>\n        <iapp-application>\n            <application-id>14</application-id>\n            <application-url>/update-status</application-url>\n            <category-id>3</category-id>\n            <category-url>/dashboard/toolshop</category-url>\n            <category-name>Tool Shop</category-name>\n            <category-icon>https://iappsdemo.fliplabs.net/IndustryAppFe/assets/icons/icon_toolshop.png</category-icon>\n        </iapp-application>\n    </iapp-applications>\n</iapps-sidebar>\n    `,\n};\n\nexport class HeaderSidebarComponent extends HTMLElement {\n  private static PASS_THROUGH_FIELDS = [\"menu-icon\", \"nav-logo\", \"user-name\", \"selected-plant\", \"selected-language\"];\n\n  static get observedAttributes() {\n    return [...HeaderSidebarComponent.PASS_THROUGH_FIELDS];\n  }\n\n  private state: HeaderState = { ...DEFAULT_STATE };\n\n  // private state: HtmlState = { dataContent: \"\" };\n\n  public connectedCallback() {\n    this.getHtmlHeaderContent();\n  }\n\n  private getMenuClickEvent() {\n    const triggerMenuSelection: any = document.querySelector(\"iapps-header\");\n    triggerMenuSelection.addEventListener(\"selectedPlantChoice\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"menu selection\");\n      // this.updateState(\"isMenuToggleReady\", !this.state.isMenuToggleReady);\n    });\n  }\n\n  private getPlantClickEvent() {\n    const triggerPlantSelection: any = document.querySelector(\"iapps-header\");\n    triggerPlantSelection.addEventListener(\"selectedMenuChoice\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"Plant selection\");\n    });\n  }\n\n  private getLanguageClickEvent() {\n    const triggerLanguageSelection: any = document.querySelector(\"iapps-header\");\n    triggerLanguageSelection.addEventListener(\"selectedLanguageChoice\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"Language selection\");\n    });\n  }\n\n  private onClickLogoEvent() {\n    const triggerOnLogoClick: any = document.querySelector(\"iapps-header\");\n    triggerOnLogoClick.addEventListener(\"onClickLogo\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"on Click Logo\");\n    });\n  }\n\n  private onClickMainMenuEvent() {\n    const triggerOnLogoClick: any = document.querySelector(\"iapps-header\");\n    triggerOnLogoClick.addEventListener(\"onClickMainMenu\", () => {\n      // tslint:disable-next-line: no-console\n      // console.log(\"on Click Main menu\");\n    });\n  }\n\n  private async getHtmlHeaderContent(): Promise<HtmlContent | null> {\n    const respHeader = await window.fetch(\"/components/preview/industry-apps-header--user-header\");\n    await respHeader.text().then(text1 => {\n      this.state.headerContent = text1;\n      return new DOMParser().parseFromString(text1, \"text/xml\");\n    });\n    const respSidebar = await window.fetch(\"/components/preview/industry-apps-side-bar\");\n    await respSidebar.text().then(text1 => {\n      this.state.sidebarContent = text1;\n      return new DOMParser().parseFromString(text1, \"text/xml\");\n    });\n\n    this.updateState(\"headerContent\", this.state.headerContent);\n    this.updateState(\"sidebarContent\", this.state.sidebarContent);\n\n    this.getMenuClickEvent();\n    this.getPlantClickEvent();\n    this.getLanguageClickEvent();\n    this.onClickLogoEvent();\n    this.onClickMainMenuEvent();\n    return \"text\";\n  }\n\n  private render() {\n    render(template(this.state), this, { eventContext: this });\n  }\n\n  private updateState(name: string, payload: string | boolean) {\n    // let state = this.state;\n    this.state = { ...this.state, [name]: payload };\n    this.render();\n  }\n}\n\nexport interface HeaderState extends HeaderProps {\n  connected: boolean;\n  content: string;\n  headerContent: HtmlData;\n  sidebarContent: HtmlData;\n}\n\nexport interface HeaderProps {\n  menuIcon?: string;\n  navLogo?: string;\n  userName?: string;\n  selectedPlant?: string;\n  selectedLanguage?: string;\n}\n\ntype HtmlData = string;\n\ntype HtmlContent = string;\n\ncustomElements.define(\"iapps-header-sidebar\", HeaderSidebarComponent);\n","import { render } from \"lit-html\";\n\nimport { template } from \"./header.tpl\";\nimport { kebapToCamelCase } from \"iapps-shared/formats\";\n\nconst DEFAULT_STATE: HeaderState = {\n  connected: false,\n  hideDropElementMobile: false,\n  plantListHidden: false,\n  plantTemplateListHidden: false,\n  languageListHidden: false,\n  languageTemplateListHidden: false,\n  showLanguagleList: true,\n  showPlantList: true,\n  menuListHidden: false,\n  plants: [],\n  languages: [],\n  menus: [],\n};\n\nexport class HeaderComponent extends HTMLElement {\n  private static PASS_THROUGH_FIELDS = [\"menu-icon\", \"nav-logo\", \"user-name\", \"selected-plant\", \"selected-language\"];\n  static get observedAttributes() {\n    return [...HeaderComponent.PASS_THROUGH_FIELDS];\n  }\n\n  private state: HeaderState = { ...DEFAULT_STATE };\n\n  public connectedCallback() {\n    // tslint:disable-next-line: no-console\n    // console.log(\"state\", this.state);\n    if (!this.state.connected) {\n      this.updatePlant();\n      this.updateLanguage();\n      this.updateMenu();\n      this.updateState(\"connected\", true);\n    }\n  }\n\n  public disConnectedCallback() {\n    this.updateState(\"connected\", false);\n  }\n\n  private updateMenu() {\n    const menuListElement = this.querySelector(\"iapps-header-menu-list\") as HTMLElement;\n    const menuListCollection: HTMLCollection = menuListElement.children;\n    const menuListArray = [].slice.call(menuListCollection);\n    const menus: Menu[] = new Array();\n    for (const menuArrayItem of menuListArray) {\n      const menuElement = menuArrayItem as HTMLElement;\n      const menu: Menu = {\n        url: (menuElement.querySelector(\"main-menu-url\") as HTMLElement).innerHTML,\n        label: (menuElement.querySelector(\"main-menu-label\") as HTMLElement).innerHTML,\n      };\n      menus.push(menu);\n    }\n    if (!menuListElement) {\n      this.updateState(\"menus\", \"\");\n      return;\n    }\n    this.updateState(\"menus\", menus);\n  }\n\n  private updateLanguage() {\n    const languageListElement = this.querySelector(\"iapps-header-language-list\") as HTMLElement;\n    if (!languageListElement) {\n      this.updateState(\"showLanguagleList\", false);\n      return;\n    }\n\n    const languageListCollection: HTMLCollection = languageListElement.children;\n    const languageListArray = [].slice.call(languageListCollection);\n    const languages: Language[] = new Array();\n    for (const languageArrayItem of languageListArray) {\n      const languageElement = languageArrayItem as HTMLElement;\n      const language: Language = {\n        id: parseInt((languageElement.querySelector(\"language-id\") as HTMLElement).innerHTML, 0),\n        icon: (languageElement.querySelector(\"language-icon\") as HTMLElement).innerHTML,\n        name: (languageElement.querySelector(\"language-name\") as HTMLElement).innerHTML,\n      };\n      languages.push(language);\n    }\n    this.updateState(\"languages\", languages);\n  }\n\n  private updatePlant() {\n    const plantListElement = this.querySelector(\"iapps-header-plant-list\") as HTMLElement;\n    if (!plantListElement) {\n      this.updateState(\"showPlantList\", false);\n      return;\n    }\n\n    const plantListCollection: HTMLCollection = plantListElement.children;\n    const plantListArray = [].slice.call(plantListCollection);\n    const plants: Plant[] = new Array();\n    for (const plantArrayItem of plantListArray) {\n      const plantElement = plantArrayItem as HTMLElement;\n      const plant: Plant = {\n        id: parseInt((plantElement.querySelector(\"plant-id\") as HTMLElement).innerHTML, 0),\n        name: (plantElement.querySelector(\"plant-name\") as HTMLElement).innerHTML,\n      };\n      plants.push(plant);\n    }\n\n    this.updateState(\"plants\", plants);\n  }\n\n  private render() {\n    render(\n      template(this.state, {\n        hidePlantList: () => {\n          if (screen.width > 767) {\n            this.updateState(\"plantListHidden\", !this.state.plantListHidden);\n          } else {\n            this.updateState(\"plantTemplateListHidden\", !this.state.plantTemplateListHidden);\n          }\n        },\n        hideLanguageList: () => {\n          if (screen.width > 767) {\n            this.updateState(\"languageListHidden\", !this.state.languageListHidden);\n          } else {\n            this.updateState(\"languageTemplateListHidden\", !this.state.languageTemplateListHidden);\n          }\n        },\n        hideMenuList: () => {\n          this.updateState(\"menuListHidden\", !this.state.menuListHidden);\n        },\n        toggleSidebar: event => {\n          const toggleMenuClick = new CustomEvent(\"toggleMenuClick\", { detail: { event } });\n          this.dispatchEvent(toggleMenuClick);\n        },\n        toggleDropDownMobile: () => {\n          this.updateState(\"hideDropElementMobile\", !this.state.hideDropElementMobile);\n          // console.log(this.state.hideDropElementMobile);\n        },\n        onPlantItemClicked: event => {\n          if (screen.width > 767) {\n            this.updateState(\"plantListHidden\", !this.state.plantListHidden);\n          } else {\n            this.updateState(\"plantTemplateListHidden\", !this.state.plantTemplateListHidden);\n          }\n          // tslint:disable-next-line: no-console\n          // console.log(event);\n          const selectedPlantElement = event.target as HTMLElement;\n          if (selectedPlantElement != null) {\n            const selectedPlantJSONString = selectedPlantElement.getAttribute(\"data-plant\") as string;\n            const selectedPlant: Plant = JSON.parse(selectedPlantJSONString);\n            this.updateState(\"selected-plant\", selectedPlant.name);\n            const selectedPlantChoice = new CustomEvent(\"selectedPlantChoice\", { detail: { event } });\n            this.dispatchEvent(selectedPlantChoice);\n          }\n        },\n        onLanguageItemClicked: event => {\n          if (screen.width > 767) {\n            this.updateState(\"languageListHidden\", !this.state.languageListHidden);\n          } else {\n            this.updateState(\"languageTemplateListHidden\", !this.state.languageTemplateListHidden);\n          }\n          // tslint:disable-next-line: no-console\n          // console.log(event);\n          const selectedLanguageElement = event.target as HTMLElement;\n          if (selectedLanguageElement != null) {\n            const selectedLanguageJSONString = selectedLanguageElement.getAttribute(\"data-language\") as string;\n            const selectedLanguage: Plant = JSON.parse(selectedLanguageJSONString);\n            this.updateState(\"selected-language\", selectedLanguage.name);\n            const selectedLanguageChoice = new CustomEvent(\"selectedLanguageChoice\", { detail: { event } });\n            this.dispatchEvent(selectedLanguageChoice);\n          }\n        },\n        onMenuItemClicked: (menu: Menu) => {\n          this.updateState(\"menuListHidden\", !this.state.menuListHidden);\n          // tslint:disable-next-line: no-console\n          // console.log(menu);\n          const menuItemClickEvent = new CustomEvent(\"selectedMenuChoice\", { detail: { menu } });\n          this.dispatchEvent(menuItemClickEvent);\n        },\n        onLogoClick: () => {\n          const onClickLogo = new CustomEvent(\"onClickLogo\", { detail: { event } });\n          this.dispatchEvent(onClickLogo);\n        },\n        mainMenuIconClick: () => {\n          const onClickMainmenuIcon = new CustomEvent(\"onClickMainMenu\", { detail: { event } });\n          this.dispatchEvent(onClickMainmenuIcon);\n        },\n      }),\n      this,\n      { eventContext: this }\n    );\n  }\n\n  public attributeChangedCallback(name: string, _oldValue: string, newValue: string | boolean) {\n    this.updateState(name, newValue);\n  }\n\n  private updateState(name: string, payload: string | boolean | Plant[] | Language[] | Menu[]) {\n    let state = this.state;\n    switch (name) {\n      case \"connected\":\n        state = { ...this.state, connected: Boolean(payload) };\n        break;\n      default:\n        name = kebapToCamelCase(name);\n        if (state[name as keyof HeaderState] === payload) {\n          break;\n        }\n        state = { ...state, [name]: payload };\n        break;\n    }\n    const redraw = state !== this.state;\n    this.state = state;\n    if (this.state.connected && redraw) {\n      this.render();\n    }\n  }\n}\n\nexport interface HeaderProps {\n  menuIcon?: string;\n  navLogo?: string;\n  userName?: string;\n  selectedPlant?: string;\n  selectedLanguage?: string;\n}\n\nexport interface HeaderState extends HeaderProps {\n  connected: boolean;\n  hideDropElementMobile: boolean;\n  plantListHidden: boolean;\n  plantTemplateListHidden: boolean;\n  languageListHidden: boolean;\n  languageTemplateListHidden: boolean;\n  showLanguagleList: boolean;\n  showPlantList: boolean;\n  menuListHidden: boolean;\n  plants: Plant[];\n  languages: Language[];\n  menus: Menu[];\n}\n\nexport interface HeaderEvents {\n  hidePlantList: () => void;\n  toggleDropDownMobile: () => void;\n  hideLanguageList: () => void;\n  hideMenuList: () => void;\n  toggleSidebar: (e: Event) => void;\n  onPlantItemClicked: (e: Event) => void;\n  onLanguageItemClicked: (e: Event) => void;\n  onMenuItemClicked: (e: Menu) => void;\n  onLogoClick: () => void;\n  mainMenuIconClick: () => void;\n}\n\nexport interface Plant {\n  id: number;\n  name: string;\n}\n\nexport interface Language {\n  id: number;\n  icon: string;\n  name: string;\n}\n\nexport interface Menu {\n  url: string;\n  label: string;\n}\n\ncustomElements.define(\"iapps-header\", HeaderComponent);\n","import { kebapToCamelCase } from \"iapps-shared/formats\";\nimport { render } from \"lit-html\";\nimport { template } from \"./sidebar.tpl\";\n\nconst MOBILE_WIDTH = 767;\n\nconst DEFAULT_STATE: SideBarState = {\n  connected: false,\n  isMobile: false,\n  isMenuToggled: false,\n  sideBarMenuItems: [],\n};\n\nconst body = document.body;\n\nconst SIDEBAR_ELEMENT_TAGS = {\n  label: \"category-name\",\n  icon: \"category-icon\",\n  categoryID: \"category-id\",\n  href: \"category-url\",\n};\n\nclass SideBarComponent extends HTMLElement {\n  private static PASS_THROUGH_FIELDS = [\"reload-page\"];\n\n  static get observedAttributes() {\n    return [...SideBarComponent.PASS_THROUGH_FIELDS];\n  }\n\n  private state: SideBarState = { ...DEFAULT_STATE };\n\n  constructor() {\n    super();\n    this.state = { ...DEFAULT_STATE };\n  }\n\n  public attributeChangedCallback(name: string, _oldValue: string | boolean, newValue: string | boolean) {\n    // tslint:disable-next-line: no-console\n    // console.log(\"attributeChangedCallback\", name, _oldValue, newValue, typeof newValue);\n    this.updateState(name, newValue);\n  }\n\n  public connectedCallback() {\n    // tslint:disable-next-line: no-console\n    // console.log(\"sidebar state\", this.state);\n    if (!this.state.connected) {\n      this.prepareSidebarMenuItems();\n      this.prepareSidebar();\n      this.updateState(\"connected\", true);\n    }\n  }\n\n  public disConnectedCallback() {\n    this.updateState(\"connected\", false);\n  }\n\n  private updateState(name: string, payload: string | boolean | SideBarMenuItem[] | SideBarMenuItem) {\n    let state = this.state;\n    switch (name) {\n      case \"connected\":\n        state = { ...this.state, connected: Boolean(payload) };\n        break;\n      default:\n        name = kebapToCamelCase(name);\n        if (state[name as keyof SideBarState] === payload) {\n          break;\n        }\n        state = { ...state, [name]: payload };\n        break;\n    }\n\n    const redraw = state !== this.state;\n    this.state = state;\n\n    if (this.state.connected && redraw) {\n      this.render();\n    }\n  }\n\n  private render() {\n    render(\n      template(this.state, {\n        menuItemClick: (menuItem: SideBarMenuItem) => {\n          if (menuItem.active) {\n            return;\n          }\n          this.state.sideBarMenuItems.map((item: SideBarMenuItem) => {\n            item.active = menuItem.categoryID === item.categoryID;\n          });\n          const url = menuItem.href;\n          // tslint:disable-next-line: no-console\n          // console.log(\"url==> \", url, this.state.reloadPage, window.location.origin);\n          if (this.state.reloadPage && String(this.state.reloadPage) === \"true\") {\n            window.location.href = window.location.origin + url;\n          } else {\n            const menuItemClickEvent = new CustomEvent(\"menuItemClicked\", { detail: { url } });\n            this.dispatchEvent(menuItemClickEvent);\n          }\n          this.updateState(\"activeMenuItem\", menuItem);\n        },\n      }),\n      this,\n      { eventContext: this }\n    );\n  }\n\n  private prepareSidebarMenuItems(): void {\n    const iappApplicationElement = this.querySelector(\"iapp-applications\") as HTMLElement;\n\n    if (iappApplicationElement === undefined || !iappApplicationElement) {\n      this.updateState(\"sideBarMenuItems\", \"\");\n      return;\n    }\n\n    const menuListCollection: HTMLCollection = iappApplicationElement.children;\n    const navItemListArray = [].slice.call(menuListCollection);\n    const sidebarMenuItems: SideBarMenuItem[] = new Array();\n    navItemListArray.forEach((navItem: any) => {\n      const navElement = navItem as HTMLElement;\n      const menuItem: SideBarMenuItem = {\n        label: (navElement.querySelector(SIDEBAR_ELEMENT_TAGS.label) as HTMLElement).innerHTML,\n        icon: (navElement.querySelector(SIDEBAR_ELEMENT_TAGS.icon) as HTMLElement).innerHTML,\n        href: (navElement.querySelector(SIDEBAR_ELEMENT_TAGS.href) as HTMLElement).innerHTML,\n        categoryID: parseInt((navElement.querySelector(SIDEBAR_ELEMENT_TAGS.categoryID) as HTMLElement).innerHTML, 0),\n      };\n      sidebarMenuItems.push(menuItem);\n    });\n\n    const filteredMenuItems = this.filterDuplicates(sidebarMenuItems);\n    const sideBarMenuItems = this.setActiveMenuItem(filteredMenuItems);\n    this.updateState(\"sideBarMenuItems\", sideBarMenuItems);\n  }\n\n  private prepareSidebar(): void {\n    if (screen.width <= MOBILE_WIDTH) {\n      this.updateState(\"isMobile\", true);\n      this.updateState(\"isMenuToggled\", true);\n    } else {\n      body.classList.add(\"opened\");\n    }\n    if (document.querySelector(\"iapps-header\")) {\n      const headerElement: any = document.querySelector(\"iapps-header\");\n      headerElement.addEventListener(\"toggleMenuClick\", () => {\n        this.toggleSidebar();\n      });\n    }\n  }\n\n  private toggleSidebar() {\n    this.state.isMenuToggled ? body.classList.add(\"opened\") : body.classList.remove(\"opened\");\n    this.updateState(\"isMenuToggled\", !this.state.isMenuToggled);\n  }\n\n  private filterDuplicates(menuItems: SideBarMenuItem[]) {\n    const categoryIds = Array.from(new Set(menuItems.map(menu => menu.categoryID)));\n    const navBarMenuItems: SideBarMenuItem[] = new Array();\n    categoryIds.forEach(categoryID => {\n      const navItem = menuItems.find(menu => menu.categoryID === categoryID);\n      if (navItem !== undefined) {\n        navBarMenuItems.push(navItem);\n      }\n    });\n    return navBarMenuItems;\n  }\n\n  private setActiveMenuItem(sideBarMenuItems: SideBarMenuItem[]): SideBarMenuItem[] {\n    const currentURL = window.location.href.replace(window.location.origin, \"\");\n    // tslint:disable-next-line: no-console\n    // console.log(\"currentURL==> \", currentURL);\n    sideBarMenuItems.map((menuItem: any) => {\n      if (menuItem.href === currentURL) {\n        menuItem.active = true;\n        this.updateState(\"activeMenuItem\", menuItem);\n      } else {\n        menuItem.active = false;\n      }\n    });\n    // tslint:disable-next-line: no-console\n    // console.log(sideBarMenuItems);\n    return sideBarMenuItems;\n  }\n}\n\ninterface SideBarProps {\n  reloadPage?: boolean;\n}\n\nexport interface SideBarState extends SideBarProps {\n  connected: boolean;\n  isMenuToggled: boolean;\n  isMobile: boolean;\n  sideBarMenuItems: SideBarMenuItem[];\n  activeMenuItem?: SideBarMenuItem;\n}\n\nexport interface SideBarMenuItem {\n  categoryID: number;\n  label: string;\n  icon: string;\n  href: string;\n  active?: boolean;\n}\n\nexport interface SideBarEvents {\n  menuItemClick: (list: SideBarMenuItem) => void;\n}\n\ncustomElements.define(\"iapps-sidebar\", SideBarComponent);\n"],"sourceRoot":""}